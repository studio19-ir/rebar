name: Build Android APK (Flutter)

on:
  workflow_dispatch: {}
  push:
    paths:
      - "lib/**"
      - "pubspec.yaml"
      - "android/**"

jobs:
  build-debug:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx1g"

    steps:
      - uses: actions/checkout@v4

      # 1) JDK 17 برای sdkmanager و ست جدید AGP/Gradle
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # 2) اطمینان از وجود ANDROID_SDK_ROOT و sdkmanager روی PATH
      - name: Ensure Android SDK & sdkmanager on PATH
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          # اگر sdkmanager نبود، cmdline-tools را دریافت و نصب کن
          if ! command -v sdkmanager >/dev/null 2>&1; then
            mkdir -p /usr/local/lib/android/sdk/cmdline-tools
            cd /usr/local/lib/android/sdk/cmdline-tools
            curl -sSL -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
            mkdir -p 16.0
            unzip -q cmdtools.zip -d 16.0
            rm -f cmdtools.zip
            rm -f latest && ln -s 16.0 latest
          fi
          sdkmanager --version || true

      # 3) پذیرش لایسنس‌ها و نصب پکیج‌های لازم SDK (API 34)
      - name: Install Android SDK packages
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # 4) Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: stable
          architecture: x64
          cache: true

      - name: Print versions & env
        run: |
          flutter --version
          dart --version
          java -version
          sdkmanager --list | head -n 50 || true
          echo "PWD=$(pwd)"; ls -la

      # 5) اگر اندروید وجود نداشت، بساز
      - name: Create Android platform if missing
        run: flutter create . --platforms=android

      - name: Flutter clean & pub get
        run: |
          flutter clean
          flutter pub get

      # 6) هم‌خانواده‌سازی نسخه‌ها: Gradle 8.4 + AGP 8.3.2 + Kotlin 1.9.22
      - name: Patch Gradle/AGP/Kotlin to a compatible set
        run: |
          set -e
          # Gradle Wrapper
          sed -i 's#distributionUrl=.*#distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip#g' android/gradle/wrapper/gradle-wrapper.properties || true

          # Plugin DSL (android/build.gradle) – اگر هست
          sed -i 's/id "com.android.application" version "[^"]*"/id "com.android.application" version "8.3.2"/' android/build.gradle || true
          sed -i 's/id "com.android.library" version "[^"]*"/id "com.android.library" version "8.3.2"/' android/build.gradle || true
          sed -i 's/id "org.jetbrains.kotlin.android" version "[^"]*"/id "org.jetbrains.kotlin.android" version "1.9.22"/' android/build.gradle || true

          # Legacy classpath (اگر پروژه قدیمی باشد)
          sed -i 's/com\.android\.tools\.build:gradle:[^"]*/com.android.tools.build:gradle:8.3.2/g' android/build.gradle || true
          sed -i 's/kotlin-gradle-plugin:[^"]*/kotlin-gradle-plugin:1.9.22/g' android/build.gradle || true

          # AndroidX + JVM args
          grep -q '^android.useAndroidX=' android/gradle.properties 2>/dev/null || echo 'android.useAndroidX=true' >> android/gradle.properties
          grep -q '^android.enableJetifier=' android/gradle.properties 2>/dev/null || echo 'android.enableJetifier=true' >> android/gradle.properties
          grep -q '^org.gradle.jvmargs=' android/gradle.properties 2>/dev/null || echo 'org.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx1g' >> android/gradle.properties

      # 7) تنظیم سطوح SDK + namespace + exported (برای AGP 8 ضروری است)
      - name: Force SDK levels & manifest basics
        run: |
          sed -i 's/compileSdkVersion \([0-9]\+\)/compileSdkVersion 34/g' android/app/build.gradle || true
          sed -i 's/targetSdkVersion \([0-9]\+\)/targetSdkVersion 34/g' android/app/build.gradle || true
          sed -i 's/minSdkVersion \([0-9]\+\)/minSdkVersion 21/g' android/app/build.gradle || true
          sed -i 's/compileSdk \([0-9]\+\)/compileSdk 34/g' android/app/build.gradle || true
          sed -i 's/targetSdk \([0-9]\+\)/targetSdk 34/g' android/app/build.gradle || true

          # namespace اگر نبود اضافه کن
          if ! grep -q 'namespace' android/app/build.gradle; then
            sed -i '0,/android\s*{/{s/android\s*{/android {\n    namespace "com.example.rebar_calc_pro"/}' android/app/build.gradle
          fi

          # android:exported برای Android 12+
          MANIFEST=android/app/src/main/AndroidManifest.xml
          if [ -f "$MANIFEST" ] && ! grep -q 'android:exported=' "$MANIFEST"; then
            sed -i '0,/<activity /s//<activity android:exported="true" /' "$MANIFEST"
          fi

      - name: Flutter doctor (verbose)
        run: flutter doctor -v

      # 8) ساخت APK دیباگ
      - name: Build debug APK (flutter)
        run: flutter build apk --debug -v

      # 9) تحویل خروجی به‌صورت Artifact
      - name: Upload artifact (APK)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            android/app/build/outputs/apk/debug/app-debug.apk
